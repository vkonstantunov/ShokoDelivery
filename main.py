import logging
import psycopg2
from aiogram import Bot, Dispatcher, executor, types
import config
from handler import kh_handler,shoko_handler,vabi_handler
from config import *

bot = Bot(token=config.TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)



# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@dp.message_handler(commands="start")
async def shoko_start(message: types.Message):
    try:
        connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        )
        connection.autocommit = True
        with connection.cursor() as cursor:
            cursor.execute(f"""
             INSERT INTO bot_users (user_id,user_name) VALUES ({message.from_user.id},'{message.from_user.first_name}');"""
                           )
        with connection.cursor() as cursor:
            cursor.execute(f"""SELECT user_name FROM bot_users WHERE user_id = '{message.from_user.id}';""")
            name = cursor.fetchone()
            print(name)
            name1 = str(name)
            name1 = name1.replace("(", "")
            name1 = name1.replace("'", "")
            name1 = name1.replace(",", "")
            name1 = name1.replace(")", "")
    except Exception as _ex:
        print(_ex)
    finally:
        if connection:
            connection.close()
            print("GOOD")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(types.KeyboardButton(text='‚òï–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞'),
                 types.KeyboardButton(text='‚òï–ö–æ—Ñ–µ –•–∞—É–∑'),
                 types.KeyboardButton(text='üç±–í–∞–±–∏–°–∞–±–∏'))
    await message.answer(f'{name1} –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É:',reply_markup=keyboard)
    return keyboard




@dp.message_handler(text="‚òï–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞")
async def menu(message: types.Message):
    photo = open('photo/logo/shokologo.jpg', 'rb')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(types.KeyboardButton(text='üçΩ–ú–µ–Ω—é'),
                types.KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞'),
                types.KeyboardButton(text='üí¨–ü–æ–º–æ—â—å'))
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ä–∞–∑–¥–µ–ª:', reply_markup=keyboard)
    return keyboard


@dp.message_handler(text="‚òï–ö–æ—Ñ–µ –•–∞—É–∑")
async def menu(message: types.Message):
    photo = open('photo/logo/khlogo.jpg', 'rb')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(types.KeyboardButton(text='üç¥–ú–µ–Ω—é'),
                types.KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞'),
                types.KeyboardButton(text='üí¨–ü–æ–º–æ—â—å'))
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    await message.answer('–î–∞–Ω–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')



@dp.message_handler(text="üç±–í–∞–±–∏–°–∞–±–∏")
async def menu(message: types.Message):
    photo = open('photo/logo/vabilogo.jpg', 'rb')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(types.KeyboardButton(text='üç£–ú–µ–Ω—é'),
                types.KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞'),
                types.KeyboardButton(text='üí¨–ü–æ–º–æ—â—å'))
    await bot.send_photo(message.chat.id, photo=photo)
    await message.answer('–î–∞–Ω–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')



@dp.message_handler(content_types=["text"])
async def menu(message: types.Message):
    if message.text == "üçΩ–ú–µ–Ω—é":
        keyboard = shoko_handler.shoko_menu()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        return keyboard
    elif message.text == "üç¥–ú–µ–Ω—é":
        keyboard = kh_handler.kh_menu()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        return keyboard
    elif message.text == "üç£–ú–µ–Ω—é":
        keyboard = vabi_handler.vabi_menu()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        return keyboard
    elif message.text == "üí¨–ü–æ–º–æ—â—å":
        await message.answer("""
–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
–ü–æ—á—Ç–∞:blabalbal
–¢–µ–ª–µ—Ñ–æ–Ω:8-999-99-99
–ù–∞—à –±–æ—Ç:@blablabal""")

@dp.callback_query_handler(text="sandwiches")
async def shoko_sandwiches(call: types.CallbackQuery):
    kb = shoko_handler.shoko_sandwiches()
    await call.message.answer("–ö–∞–∫–æ–π —Å—ç–Ω–¥–≤–∏—á –≤–∞–º –ø–æ –≤–∫—É—Å—É?", reply_markup=kb)

@dp.callback_query_handler(text="salad")
async def shoko_salad(call: types.CallbackQuery):
    kb = shoko_handler.shoko_salad()
    await call.message.answer("–ö–∞–∫–æ–π –°–∞–ª–∞—Ç –≤–∞–º –ø–æ –≤–∫—É—Å—É?", reply_markup=kb)

@dp.callback_query_handler(text="pan")
async def shoko_pan(call: types.CallbackQuery):
    kb = shoko_handler.shoko_pan()
    await call.message.answer("–ö–∞–∫–∏–µ –±–ª–∏–Ω—á–∏–∫–∏ –≤—ã –ª—é–±–∏—Ç–µ?", reply_markup=kb)

@dp.callback_query_handler(text="soup")
async def shoko_soup(call: types.CallbackQuery):
    photo = open('photo/soup/qur.jpg', 'rb')
    photo1 = open('photo/soup/grib.jpg', 'rb')
    photo2 = open('photo/soup/tom.jpg', 'rb')
    photo3 = open('photo/soup/borch.jpg', 'rb')
    kb = shoko_handler.shoko_soup()
    await call.message.answer_photo(photo, """
–ö—É—Ä–∏–Ω—ã–π —Å—É–ø —Å –ª–∞–ø—à–æ–π 300–≥—Ä
–¶–µ–Ω–∞: 300—Ä""", reply_markup=kb)
    await call.message.answer_photo(photo1, '–ö—Ä–µ–º-–°—É–ø —Å —à–∞–º–ø–∏–Ω—å–æ–Ω–∞–º–∏',reply_markup=kb)
    await call.message.answer_photo(photo2, '–¢–æ–º —è–º —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ –∏ –∫–∞–ª—å–º–∞—Ä–æ–º', reply_markup=kb)
    await call.message.answer_photo(photo3, '–ë–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π', reply_markup=kb)


@dp.callback_query_handler(text="pizza")
async def shoko_pizza(call: types.CallbackQuery):
    kb = shoko_handler.shoko_pizza()
    await call.message.answer("–ö–∞–∫–æ–π —Å—É–ø –≤–∞–º –ø–æ –≤–∫—É—Å—É?", reply_markup=kb)



@dp.callback_query_handler(text="hot_bl")
async def shoko_hot_bl(call: types.CallbackQuery):
    kb = shoko_handler.shoko_hot_bl()
    await call.message.answer("–ö–∞–∫ –¥–æ–º–∞", reply_markup=kb)


@dp.callback_query_handler(text="post")
async def shoko_post(call: types.CallbackQuery):
    kb = shoko_handler.shoko_post()
    await call.message.answer("–î–ª—è —Ç–µ—Ö –∫—Ç–æ –¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç", reply_markup=kb)


@dp.callback_query_handler(text="combo")
async def shoko_combo(call: types.CallbackQuery):
    kb = shoko_handler.shoko_combo()
    await call.message.answer("–í—ã–≥–æ–¥–Ω–æ", reply_markup=kb)


@dp.callback_query_handler(text="break")
async def shoko_break(call: types.CallbackQuery):
    kb = shoko_handler.shoko_break()
    await call.message.answer("–ò—Ö –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ü–µ–ª—ã–π –¥–µ–Ω—å", reply_markup=kb)


@dp.callback_query_handler(text="desert")
async def shoko_desert(call: types.CallbackQuery):
    kb = shoko_handler.shoko_desert()
    await call.message.answer("–ú–º–º –∫–∞–∫ –≤–∫—É—Å–Ω–æ", reply_markup=kb)


@dp.callback_query_handler(text="test")
async def shoko_test(call: types.CallbackQuery):
    await call.message.answer("–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ......")



if __name__ == '__main__':
    executor.start_polling(dp)
